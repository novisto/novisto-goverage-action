// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	data "goverage/data"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetCoverageData provides a mock function with given fields: ctx, params
func (_m *Repository) GetCoverageData(ctx context.Context, params data.GetCoverageDataParams) ([]byte, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetCoverageData")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, data.GetCoverageDataParams) ([]byte, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, data.GetCoverageDataParams) []byte); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, data.GetCoverageDataParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetCoverageData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoverageData'
type Repository_GetCoverageData_Call struct {
	*mock.Call
}

// GetCoverageData is a helper method to define mock.On call
//   - ctx context.Context
//   - params data.GetCoverageDataParams
func (_e *Repository_Expecter) GetCoverageData(ctx interface{}, params interface{}) *Repository_GetCoverageData_Call {
	return &Repository_GetCoverageData_Call{Call: _e.mock.On("GetCoverageData", ctx, params)}
}

func (_c *Repository_GetCoverageData_Call) Run(run func(ctx context.Context, params data.GetCoverageDataParams)) *Repository_GetCoverageData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data.GetCoverageDataParams))
	})
	return _c
}

func (_c *Repository_GetCoverageData_Call) Return(_a0 []byte, _a1 error) *Repository_GetCoverageData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetCoverageData_Call) RunAndReturn(run func(context.Context, data.GetCoverageDataParams) ([]byte, error)) *Repository_GetCoverageData_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecentCoverage provides a mock function with given fields: ctx, params
func (_m *Repository) GetRecentCoverage(ctx context.Context, params data.GetRecentCoverageParams) (data.Coverage, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentCoverage")
	}

	var r0 data.Coverage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, data.GetRecentCoverageParams) (data.Coverage, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, data.GetRecentCoverageParams) data.Coverage); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(data.Coverage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, data.GetRecentCoverageParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetRecentCoverage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecentCoverage'
type Repository_GetRecentCoverage_Call struct {
	*mock.Call
}

// GetRecentCoverage is a helper method to define mock.On call
//   - ctx context.Context
//   - params data.GetRecentCoverageParams
func (_e *Repository_Expecter) GetRecentCoverage(ctx interface{}, params interface{}) *Repository_GetRecentCoverage_Call {
	return &Repository_GetRecentCoverage_Call{Call: _e.mock.On("GetRecentCoverage", ctx, params)}
}

func (_c *Repository_GetRecentCoverage_Call) Run(run func(ctx context.Context, params data.GetRecentCoverageParams)) *Repository_GetRecentCoverage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data.GetRecentCoverageParams))
	})
	return _c
}

func (_c *Repository_GetRecentCoverage_Call) Return(_a0 data.Coverage, _a1 error) *Repository_GetRecentCoverage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetRecentCoverage_Call) RunAndReturn(run func(context.Context, data.GetRecentCoverageParams) (data.Coverage, error)) *Repository_GetRecentCoverage_Call {
	_c.Call.Return(run)
	return _c
}

// ListBranches provides a mock function with given fields: ctx, params
func (_m *Repository) ListBranches(ctx context.Context, params data.ListBranchesParams) ([]string, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListBranches")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, data.ListBranchesParams) ([]string, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, data.ListBranchesParams) []string); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, data.ListBranchesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ListBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBranches'
type Repository_ListBranches_Call struct {
	*mock.Call
}

// ListBranches is a helper method to define mock.On call
//   - ctx context.Context
//   - params data.ListBranchesParams
func (_e *Repository_Expecter) ListBranches(ctx interface{}, params interface{}) *Repository_ListBranches_Call {
	return &Repository_ListBranches_Call{Call: _e.mock.On("ListBranches", ctx, params)}
}

func (_c *Repository_ListBranches_Call) Run(run func(ctx context.Context, params data.ListBranchesParams)) *Repository_ListBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data.ListBranchesParams))
	})
	return _c
}

func (_c *Repository_ListBranches_Call) Return(_a0 []string, _a1 error) *Repository_ListBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ListBranches_Call) RunAndReturn(run func(context.Context, data.ListBranchesParams) ([]string, error)) *Repository_ListBranches_Call {
	_c.Call.Return(run)
	return _c
}

// ListCoverageAsc provides a mock function with given fields: ctx, params
func (_m *Repository) ListCoverageAsc(ctx context.Context, params data.ListCoverageAscParams) ([]data.Coverage, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListCoverageAsc")
	}

	var r0 []data.Coverage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, data.ListCoverageAscParams) ([]data.Coverage, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, data.ListCoverageAscParams) []data.Coverage); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.Coverage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, data.ListCoverageAscParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ListCoverageAsc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCoverageAsc'
type Repository_ListCoverageAsc_Call struct {
	*mock.Call
}

// ListCoverageAsc is a helper method to define mock.On call
//   - ctx context.Context
//   - params data.ListCoverageAscParams
func (_e *Repository_Expecter) ListCoverageAsc(ctx interface{}, params interface{}) *Repository_ListCoverageAsc_Call {
	return &Repository_ListCoverageAsc_Call{Call: _e.mock.On("ListCoverageAsc", ctx, params)}
}

func (_c *Repository_ListCoverageAsc_Call) Run(run func(ctx context.Context, params data.ListCoverageAscParams)) *Repository_ListCoverageAsc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data.ListCoverageAscParams))
	})
	return _c
}

func (_c *Repository_ListCoverageAsc_Call) Return(_a0 []data.Coverage, _a1 error) *Repository_ListCoverageAsc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ListCoverageAsc_Call) RunAndReturn(run func(context.Context, data.ListCoverageAscParams) ([]data.Coverage, error)) *Repository_ListCoverageAsc_Call {
	_c.Call.Return(run)
	return _c
}

// ListCoverageDesc provides a mock function with given fields: ctx, params
func (_m *Repository) ListCoverageDesc(ctx context.Context, params data.ListCoverageDescParams) ([]data.Coverage, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListCoverageDesc")
	}

	var r0 []data.Coverage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, data.ListCoverageDescParams) ([]data.Coverage, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, data.ListCoverageDescParams) []data.Coverage); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.Coverage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, data.ListCoverageDescParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ListCoverageDesc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCoverageDesc'
type Repository_ListCoverageDesc_Call struct {
	*mock.Call
}

// ListCoverageDesc is a helper method to define mock.On call
//   - ctx context.Context
//   - params data.ListCoverageDescParams
func (_e *Repository_Expecter) ListCoverageDesc(ctx interface{}, params interface{}) *Repository_ListCoverageDesc_Call {
	return &Repository_ListCoverageDesc_Call{Call: _e.mock.On("ListCoverageDesc", ctx, params)}
}

func (_c *Repository_ListCoverageDesc_Call) Run(run func(ctx context.Context, params data.ListCoverageDescParams)) *Repository_ListCoverageDesc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data.ListCoverageDescParams))
	})
	return _c
}

func (_c *Repository_ListCoverageDesc_Call) Return(_a0 []data.Coverage, _a1 error) *Repository_ListCoverageDesc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ListCoverageDesc_Call) RunAndReturn(run func(context.Context, data.ListCoverageDescParams) ([]data.Coverage, error)) *Repository_ListCoverageDesc_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function with given fields: ctx, repoName
func (_m *Repository) ListProjects(ctx context.Context, repoName string) ([]string, error) {
	ret := _m.Called(ctx, repoName)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, repoName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, repoName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, repoName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type Repository_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - repoName string
func (_e *Repository_Expecter) ListProjects(ctx interface{}, repoName interface{}) *Repository_ListProjects_Call {
	return &Repository_ListProjects_Call{Call: _e.mock.On("ListProjects", ctx, repoName)}
}

func (_c *Repository_ListProjects_Call) Run(run func(ctx context.Context, repoName string)) *Repository_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_ListProjects_Call) Return(_a0 []string, _a1 error) *Repository_ListProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ListProjects_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *Repository_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepositories provides a mock function with given fields: ctx
func (_m *Repository) ListRepositories(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositories")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_ListRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepositories'
type Repository_ListRepositories_Call struct {
	*mock.Call
}

// ListRepositories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) ListRepositories(ctx interface{}) *Repository_ListRepositories_Call {
	return &Repository_ListRepositories_Call{Call: _e.mock.On("ListRepositories", ctx)}
}

func (_c *Repository_ListRepositories_Call) Run(run func(ctx context.Context)) *Repository_ListRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_ListRepositories_Call) Return(_a0 []string, _a1 error) *Repository_ListRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_ListRepositories_Call) RunAndReturn(run func(context.Context) ([]string, error)) *Repository_ListRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertCoverage provides a mock function with given fields: ctx, params
func (_m *Repository) UpsertCoverage(ctx context.Context, params data.UpsertCoverageParams) (data.Coverage, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpsertCoverage")
	}

	var r0 data.Coverage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, data.UpsertCoverageParams) (data.Coverage, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, data.UpsertCoverageParams) data.Coverage); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(data.Coverage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, data.UpsertCoverageParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_UpsertCoverage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCoverage'
type Repository_UpsertCoverage_Call struct {
	*mock.Call
}

// UpsertCoverage is a helper method to define mock.On call
//   - ctx context.Context
//   - params data.UpsertCoverageParams
func (_e *Repository_Expecter) UpsertCoverage(ctx interface{}, params interface{}) *Repository_UpsertCoverage_Call {
	return &Repository_UpsertCoverage_Call{Call: _e.mock.On("UpsertCoverage", ctx, params)}
}

func (_c *Repository_UpsertCoverage_Call) Run(run func(ctx context.Context, params data.UpsertCoverageParams)) *Repository_UpsertCoverage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(data.UpsertCoverageParams))
	})
	return _c
}

func (_c *Repository_UpsertCoverage_Call) Return(_a0 data.Coverage, _a1 error) *Repository_UpsertCoverage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_UpsertCoverage_Call) RunAndReturn(run func(context.Context, data.UpsertCoverageParams) (data.Coverage, error)) *Repository_UpsertCoverage_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
